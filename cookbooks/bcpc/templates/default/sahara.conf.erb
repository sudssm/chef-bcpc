[DEFAULT]

# Hostname or IP address that will be used to listen on
# (string value)
host=<%=node['bcpc']['management']['vip']%>

# Port that will be used to listen on (integer value)
port=8386

# If set to True, Sahara will use floating IPs to communicate
# with instances. To make sure that all instances have
# floating IPs assigned in Nova Network set
# "auto_assign_floating_ip=True" in nova.conf.If Neutron is
# used for networking, make sure that all Node Groups have
# "floating_ip_pool" parameter defined. (boolean value)
use_floating_ips=True

# Use Neutron or Nova Network (boolean value)
#use_neutron=false

# Use network namespaces for communication (only valid to use in conjunction
# with use_neutron=True)
#use_namespaces=false

auto_assignment_enabled = False
os_region_name=<%=node['bcpc']['region_name']%>

# Maximum length of job binary data in kilobytes that may be
# stored or retrieved in a single operation (integer value)
#job_binary_max_KB=5120

# Postfix for storing jobs in hdfs. Will be added to
# /user/hadoop/ (string value)
#job_workflow_postfix=

# enable periodic tasks (boolean value)
#periodic_enable=true



# Enables data locality for hadoop cluster.
# Also enables data locality for Swift used by hadoop.
# If enabled, 'compute_topology' and 'swift_topology'
# configuration parameters should point to OpenStack and Swift
# topology correspondingly. (boolean value)
#enable_data_locality=false

# File with nova compute topology. It should
# contain mapping between nova computes and racks.
# File format:
# compute1 /rack1
# compute2 /rack2
# compute3 /rack2
# (string value)
#compute_topology_file=etc/sahara/compute.topology

# File with Swift topology. It should contains mapping
# between Swift nodes and racks. File format:
# node1 /rack1
# node2 /rack2
# node3 /rack2
# (string value)
#swift_topology_file=etc/sahara/swift.topology


# Rabbit message queue settings

rabbit_host=<%=node['bcpc']['management']['vip']%>
rabbit_password=<%=get_config('rabbitmq-password')%>
rabbit_ha_queues=False
rabbit_durable_queues=True

#infrastructure_engine=direct

# Log request/response exchange details: environ, headers and
# bodies (boolean value)
#log_exchange=false

# Print debugging output (set logging level to DEBUG instead
# of default WARNING level). (boolean value)
debug=true

# Print more verbose output (set logging level to INFO instead
# of default WARNING level). (boolean value)
verbose=true

# Log output to standard error (boolean value)
#use_stderr=true

# (Optional) Name of log file to output to. If no default is
# set, logging will go to stdout. (string value)
log_file = /var/log/sahara/sahara.log

# (Optional) The base directory used for relative --log-file
# paths (string value)
#log_dir=<None>

# Use syslog for logging. (boolean value)
#use_syslog=false

# syslog facility to receive log lines (string value)
#syslog_log_facility=LOG_USER

# List of plugins to be loaded. Sahara preserves the order of
# the list when returning it. (list value)
#plugins=vanilla,hdp

[database]

# The SQLAlchemy connection string used to connect to the
# database (string value)
connection=mysql://<%=get_config('mysql-sahara-user')%>:<%=get_config('mysql-sahara-password')%>@<%=node['bcpc']['management']['vip']%>/<%=node['bcpc']['sahara_dbname']%>
idle_timeout=3600


[keystone_authtoken]
auth_host = <%=node['bcpc']['management']['vip']%>
auth_port = 35357
auth_protocol = https
admin_tenant_name = <%=node['bcpc']['admin_tenant']%>
admin_user = <%=get_config('keystone-admin-user')%>
admin_password = <%=get_config('keystone-admin-password')%>

# A PEM encoded Certificate Authority to use when verifying
# HTTPs connections. Defaults to system CAs. (string value)
cafile = /etc/ssl/certs/ssl-bcpc.pem

# Verify HTTPS connections. (boolean value)
#insecure=true

auth_version = v2.0
